{{- if or (or (eq "all" .Values.global.deploymentType) (eq "internal" .Values.global.deploymentType) ) (not .Values.global.deploymentType) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "sda.fullname" . }}-finalize
  labels:
    role: finalize
    app: {{ template "sda.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: {{ .Release.Name }}-finalize
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  revisionHistoryLimit: {{ default "3" .Values.global.revisionHistory }}
  selector:
    matchLabels:
      app: {{ template "sda.name" . }}-finalize
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "sda.name" . }}-finalize
        role: finalize
        release: {{ .Release.Name }}
      annotations:
        {{- if not .Values.global.vaultSecrets }}
        checksum/config: {{ include (print $.Template.BasePath "/finalize-secrets.yaml") . | sha256sum }}
        {{- end }}
{{- if .Values.global.podAnnotations }}
{{- toYaml .Values.global.podAnnotations | nindent 8 -}}
{{- end }}
{{- if .Values.finalize.annotations }}
{{- toYaml .Values.finalize.annotations | nindent 8 -}}
{{- end }}
    spec:
    {{- if .Values.global.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
    {{- if and .Values.global.pkiPermissions .Values.global.tls.enabled }}
      initContainers:
      - name: tls-init
        image: busybox
        command: ["/bin/sh", "-c"]
        args: ["/bin/cp /tls-certs/* /tls/ && chown 65534:65534 /tls/* && chmod 0600 /tls/*"]
        securityContext:
          allowPrivilegeEscalation: false
{{- if .Values.global.extraSecurityContext }}
{{- toYaml .Values.global.extraSecurityContext | nindent 10 -}}
{{- end }}
        volumeMounts:
        - name: tls-certs
          mountPath: /tls-certs
        - name: tls
          mountPath: /tls
    {{- end }}
      containers:
      - name: finalize
        image: "{{ .Values.image.repository }}:{{ default .Chart.AppVersion .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command: ["sda-finalize"]
        securityContext:
          allowPrivilegeEscalation: false
        env:
{{- if .Values.global.backupArchive.storageType }}
        - name: ARCHIVE_TYPE
  {{- if eq "s3" .Values.global.archive.storageType }}
          value: "s3"
        - name: ARCHIVE_URL
          value: {{ required "S3 archive URL missing" .Values.global.archive.s3Url }}
    {{- if .Values.global.archive.s3Port }}
        - name: ARCHIVE_PORT
          value: {{ .Values.global.archive.s3Port | quote }}
    {{- end }}
        - name: ARCHIVE_BUCKET
          value: {{ required "S3 archive bucket missing" .Values.global.archive.s3Bucket }}
        - name: ARCHIVE_REGION
          value: {{ default "us-east-1" .Values.global.archive.s3Region }}
        - name: ARCHIVE_CHUNKSIZE
          value: {{ .Values.global.archive.s3ChunkSize | quote }}
    {{- if and .Values.global.archive.s3CaFile .Values.global.tls.enabled }}
        - name: ARCHIVE_CACERT
          value: {{ template "tlsPath" . }}/ca.crt
    {{- end }}
  {{- else }}
          value: "posix"
        - name: ARCHIVE_LOCATION
          value: "{{ .Values.global.archive.volumePath }}"
  {{- end }}
        - name: BACKUP_TYPE
  {{- if eq "s3" .Values.global.backupArchive.storageType }}
          value: "s3"
        - name: BACKUP_URL
          value: {{ required "S3 backup archive URL missing" .Values.global.backupArchive.s3Url }}
      {{- if .Values.global.backupArchive.s3Port }}
        - name: BACKUP_PORT
          value: {{ .Values.global.backupArchive.s3Port | quote }}
      {{- end }}
        - name: BACKUP_BUCKET
          value: {{ required "S3 backup archive bucket missing" .Values.global.backupArchive.s3Bucket }}
        - name: BACKUP_REGION
          value: {{ default "us-east-1" .Values.global.backupArchive.s3Region }}
        - name: BACKUP_CHUNKSIZE
          value: {{ .Values.global.backupArchive.s3ChunkSize | quote }}
    {{- if and .Values.global.backupArchive.s3CaFile .Values.global.tls.enabled }}
        - name: BACKUP_CACERT
          value: {{ template "tlsPath" . }}/ca.crt
    {{- end }}
  {{- else }}
          value: "posix"
        - name: BACKUP_LOCATION
          value: "{{ .Values.global.backupArchive.volumePath }}"
  {{- end }}
        - name: BACKUP_COPYHEADER
          value: "{{ .Values.global.backupArchive.copyHeader }}"
    {{- if .Values.global.backupArchive.copyHeader}}
        - name: C4GH_FILEPATH
          value: "{{ template "c4ghPath" . }}/{{ .Values.global.c4gh.keyFile }}"
        - name: C4GH_BACKUPPUBKEY
          value: "{{ template "c4ghPath" . }}/{{ .Values.global.c4gh.backupPubKey }}"
    {{- end }}
{{- end }}
        - name: BROKER_DURABLE
          value: {{ .Values.global.broker.durable | quote }}
        - name: BROKER_EXCHANGE
          value: {{ default "sda" .Values.global.broker.exchange }}
        - name: BROKER_QUEUE
          value: "accession"
        - name: BROKER_HOST
          value: {{ required "A valid MQ host is required" .Values.global.broker.host | quote }}
        - name: BROKER_PORT
          value: {{ .Values.global.broker.port | quote }}
        - name: BROKER_PREFETCHCOUNT
          value: {{ .Values.global.broker.prefetchCount | quote }}
        - name: BROKER_ROUTINGERROR
          value: {{ .Values.global.broker.routingError }}
        - name: BROKER_ROUTINGKEY
          value: "completed"
        - name: BROKER_VHOST
          value: {{ .Values.global.broker.vhost | quote }}
        - name: BROKER_SERVERNAME
          value: {{ .Values.global.broker.host | quote }}
        - name: BROKER_SSL
          value: {{ .Values.global.tls.enabled | quote }}
        {{- if .Values.global.tls.enabled }}
        - name: BROKER_VERIFYPEER
          value: {{ .Values.global.broker.verifyPeer | quote }}
        - name: BROKER_CACERT
          value: {{ include "tlsPath" . }}/ca.crt
        {{- if .Values.global.broker.verifyPeer }}
        - name: BROKER_CLIENTCERT
          value: {{ include "tlsPath" . }}/tls.crt
        - name: BROKER_CLIENTKEY
          value: {{ include "tlsPath" . }}/tls.key
        {{- end }}
      {{- end }}
      {{- if .Values.global.tls.enabled }}
        - name: DB_CACERT
          value: {{ include "tlsPath" . }}/ca.crt
        {{- if ne "verify-none" .Values.global.db.sslMode }}
        - name: DB_CLIENTCERT
          value: {{ include "tlsPath" . }}/tls.crt
        - name: DB_CLIENTKEY
          value: {{ include "tlsPath" . }}/tls.key
        {{- end }}
      {{- end }}
        - name: DB_DATABASE
          value: {{ default "lega" .Values.global.db.name | quote }}
        - name: DB_HOST
          value: {{ required "A valid DB host is required" .Values.global.db.host | quote }}
        - name: DB_PORT
          value: {{ .Values.global.db.port | quote }}
        - name: DB_SSLMODE
          value: {{ template "dbSSLmode" . }}
      {{- if .Values.global.log.format }}
        - name: LOG_FORMAT
          value: {{ .Values.global.log.format | quote }}
      {{- end }}
      {{- if .Values.global.log.level }}
        - name: LOG_LEVEL
          value: {{ .Values.global.log.level | quote }}
      {{- end }}
        - name: SCHEMA_TYPE
          value: {{ default "federated" .Values.global.schemaType }}
      {{- if not .Values.global.vaultSecrets }}
      {{- if eq "s3" .Values.global.archive.storageType }}
        - name: ARCHIVE_ACCESSKEY
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}-s3archive-keys
              key: s3ArchiveAccessKey
        - name: ARCHIVE_SECRETKEY
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}-s3archive-keys
              key: s3ArchiveSecretKey
      {{- end }}
      {{- if eq "s3" .Values.global.backupArchive.storageType }}
        - name: BACKUP_ACCESSKEY
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}-s3backup-keys
              key: s3BackupAccessKey
        - name: BACKUP_SECRETKEY
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}-s3backup-keys
              key: s3BackupSecretKey
      {{- end }}
        - name: BROKER_PASSWORD
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-finalize
                key: mqPassword
        - name: BROKER_USER
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-finalize
                key: mqUser
        - name: DB_PASSWORD
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-finalize
                key: dbPassword
        - name: DB_USER
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-finalize
                key: dbUser
      {{ else }}
        - name: CONFIGFILE
          value: {{ include "confFile" . }}
      {{- end }}
        resources:
{{ toYaml .Values.finalize.resources | trim | indent 10 }}
  {{- if and (not .Values.global.pkiService) .Values.global.tls.enabled }}
        volumeMounts:
        - name: tls
          mountPath: {{ template "tlsPath" . }}
      volumes:
        - name: {{ ternary "tls" "tls-certs" (empty .Values.global.pkiPermissions) }}
          projected:
            sources:
            {{- if or .Values.global.tls.clusterIssuer .Values.global.tls.issuer }}
            - secret:
                name: {{ template "sda.fullname" . }}-finalize-certs
            {{- else }}
            - secret:
                name: {{ required "An certificate issuer or a TLS secret name is required for finalize" .Values.finalize.tls.secretName }}
            {{- end }}
      {{- if .Values.global.pkiPermissions }}
        - name: tls
          emptyDir:
            medium: Memory
            sizeLimit: 10Mi
      {{- end }}
    {{- end }}
      restartPolicy: Always
{{- end }}
